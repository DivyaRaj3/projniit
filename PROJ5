


import java.io.*;
import java.util.TreeMap;

import org.apache.hadoop.io.*;
//import org.apache.hadoop.mapred.MRCaching.ReduceClass;
import org.apache.hadoop.mapreduce.*;
import org.apache.hadoop.conf.*;

import org.apache.hadoop.fs.*;

import org.apache.hadoop.mapreduce.Reducer.Context;
import org.apache.hadoop.mapreduce.lib.input.*;
import org.apache.hadoop.mapreduce.lib.output.*;

import org.apache.hadoop.util.*;
//import proj4.CaderPartitioner;

public class proj5 extends Configured implements Tool
{
   //Map class
	
   public static class MapClass extends Mapper<LongWritable,Text,Text,Text>
   {
      public void map(LongWritable key, Text value, Context context)
      {
         try{
            String[] str = value.toString().split(",");
            String jobtitle= str[5];
			
			String year= str[8];
		    String c="";
		    c= jobtitle + ',' + year;
			context.write(new Text(jobtitle),new Text(c));
	           
         }
         catch(Exception e)
         {
            System.out.println(e.getMessage());
         }
      }
   }
   
  
   //Reducer class
	
   public static class ReduceClass extends Reducer<Text,Text,NullWritable,Text>
   {
   
	   private TreeMap<Long,Text> repToRecordMap = new TreeMap<Long,Text>();
    

      public void reduce(Text key, Iterable <Text> values, Context context) throws IOException, InterruptedException
      {
    	  long count=0;
    	  
    	  String val="";
    	  String cnt="";
    	  String rec="";
    			  
    	  String jobtitle="";
    	  jobtitle=key.toString();
    		 
    	/*  String[] str = values.toString().split(",");
          String t="";
			String y= str[1];                // year
		*/
    	  
    	 
			
			for(Text v:values)
			{	
	    		count++;
	    		rec=v.toString();    // rec contains jobtitle and year
			}
			
			 cnt= String.format("%d", count);
			val =  rec + ',' + cnt;	
			
			//String z="";
			//z= t + ',' + y;
			//LongWritable t=new LongWritable(count);
    		//context.write(key, new Text(z));
        
        repToRecordMap.put(new Long(count), new Text(val));
		
		if (repToRecordMap.size() > 10)
		{
		repToRecordMap.remove(repToRecordMap.firstKey());
		}
		
    }
		protected void cleanup(Context context) throws IOException,
		InterruptedException 
		{
			for (Text t : repToRecordMap.values()) 
			{
			// Output our five records to the file system with a null key
			context.write(NullWritable.get(), t);
			
			}
		}

       
      
   }
   
   //Partitioner class
	
   public static class CaderPartitioner extends
   Partitioner < Text, Text >
   {
      @Override
      public int getPartition(Text key, Text value, int numReduceTasks)
      {
         String[] str = value.toString().split(",");
       String eyear=str[1];
       if(eyear.equals("2011"))
       {
          return 0;
       }
       if(eyear.equals("2012"))
       {
          return 1 ;
       }
       if(eyear.equals("2013"))
       {
          return 2 ;
       }
       if(eyear.equals("2014"))
       {
           return 3 ;
        }
       if(eyear.equals("2015"))
        {
            return 4 ;
         }
        
           
      }
      
   } 
   
   
   public int run(String[] arg) throws Exception
   {
	
	   
	  Configuration conf = new Configuration();
	  Job job = Job.getInstance(conf);
	  job.setJarByClass(proj5.class);
	  job.setJobName("State Wise Item Qty sales");
      FileInputFormat.setInputPaths(job, new Path(arg[0]));
      FileOutputFormat.setOutputPath(job,new Path(arg[1]));
		
      job.setMapperClass(MapClass.class);
		
      job.setMapOutputKeyClass(Text.class);
      job.setMapOutputValueClass(Text.class);
      
      //set partitioner statement
		
      job.setPartitionerClass(CaderPartitioner.class);
      job.setReducerClass(ReduceClass.class);
      job.setNumReduceTasks(2);
      job.setInputFormatClass(TextInputFormat.class);
		
      job.setOutputFormatClass(TextOutputFormat.class);
      
      job.setOutputKeyClass(NullWritable.class);
      job.setOutputValueClass(Text.class);
		
      System.exit(job.waitForCompletion(true)? 0 : 1);
      return 0;
   }
   
   public static void main(String ar[]) throws Exception
   {
      ToolRunner.run(new Configuration(), new proj5(),ar);
      System.exit(0);
   }
}









public class proj5 {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}

